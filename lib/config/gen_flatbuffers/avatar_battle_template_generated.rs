// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AvatarBattleTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AvatarBattleTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AvatarBattleTemplate<'a> {
  type Inner = AvatarBattleTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AvatarBattleTemplate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 8;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 10;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 12;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 16;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 18;
  pub const VT_UNK_8: flatbuffers::VOffsetT = 20;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 22;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 24;
  pub const VT_AVATAR_PIECE_ID: flatbuffers::VOffsetT = 26;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 28;
  pub const VT_UNK_13: flatbuffers::VOffsetT = 30;
  pub const VT_HP_MAX: flatbuffers::VOffsetT = 32;
  pub const VT_HEALTH_GROWTH: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_16: flatbuffers::VOffsetT = 36;
  pub const VT_UNK_17: flatbuffers::VOffsetT = 38;
  pub const VT_UNK_18: flatbuffers::VOffsetT = 40;
  pub const VT_UNK_19: flatbuffers::VOffsetT = 42;
  pub const VT_UNK_20: flatbuffers::VOffsetT = 44;
  pub const VT_ATTACK: flatbuffers::VOffsetT = 46;
  pub const VT_ATTACK_GROWTH: flatbuffers::VOffsetT = 48;
  pub const VT_DEFENCE: flatbuffers::VOffsetT = 50;
  pub const VT_DEFENCE_GROWTH: flatbuffers::VOffsetT = 52;
  pub const VT_CRIT: flatbuffers::VOffsetT = 54;
  pub const VT_CRIT_DAMAGE: flatbuffers::VOffsetT = 56;
  pub const VT_CRIT_RES: flatbuffers::VOffsetT = 58;
  pub const VT_CRIT_DAMAGE_RES: flatbuffers::VOffsetT = 60;
  pub const VT_PEN_RATE: flatbuffers::VOffsetT = 62;
  pub const VT_PEN_DELTA: flatbuffers::VOffsetT = 64;
  pub const VT_LUCK: flatbuffers::VOffsetT = 66;
  pub const VT_STUN: flatbuffers::VOffsetT = 68;
  pub const VT_BREAK_STUN: flatbuffers::VOffsetT = 70;
  pub const VT_ELEMENT_ABNORMAL_POWER: flatbuffers::VOffsetT = 72;
  pub const VT_SP_BAR_POINT: flatbuffers::VOffsetT = 74;
  pub const VT_SP_RECOVER: flatbuffers::VOffsetT = 76;
  pub const VT_ELEMENT_MYSTERY: flatbuffers::VOffsetT = 78;
  pub const VT_RBL: flatbuffers::VOffsetT = 80;
  pub const VT_RBL_CORRECTION_FACTOR: flatbuffers::VOffsetT = 82;
  pub const VT_RBL_PROBABILITY: flatbuffers::VOffsetT = 84;
  pub const VT_UNK_41: flatbuffers::VOffsetT = 86;
  pub const VT_UNK_42: flatbuffers::VOffsetT = 88;
  pub const VT_UNK_43: flatbuffers::VOffsetT = 90;
  pub const VT_UNK_44: flatbuffers::VOffsetT = 92;
  pub const VT_UNK_45: flatbuffers::VOffsetT = 94;
  pub const VT_UNK_46: flatbuffers::VOffsetT = 96;
  pub const VT_UNK_47: flatbuffers::VOffsetT = 98;
  pub const VT_UNK_48: flatbuffers::VOffsetT = 100;
  pub const VT_UNK_49: flatbuffers::VOffsetT = 102;
  pub const VT_UNK_50: flatbuffers::VOffsetT = 104;
  pub const VT_UNK_51: flatbuffers::VOffsetT = 106;
  pub const VT_UNK_52: flatbuffers::VOffsetT = 108;
  pub const VT_UNK_53: flatbuffers::VOffsetT = 110;
  pub const VT_UNK_54: flatbuffers::VOffsetT = 112;
  pub const VT_UNK_55: flatbuffers::VOffsetT = 114;
  pub const VT_UNK_56: flatbuffers::VOffsetT = 116;
  pub const VT_UNK_57: flatbuffers::VOffsetT = 118;
  pub const VT_UNK_58: flatbuffers::VOffsetT = 120;
  pub const VT_UNK_59: flatbuffers::VOffsetT = 122;
  pub const VT_UNK_60: flatbuffers::VOffsetT = 124;
  pub const VT_UNK_61: flatbuffers::VOffsetT = 126;
  pub const VT_UNK_62: flatbuffers::VOffsetT = 128;
  pub const VT_UNK_63: flatbuffers::VOffsetT = 130;
  pub const VT_UNK_64: flatbuffers::VOffsetT = 132;
  pub const VT_UNK_65: flatbuffers::VOffsetT = 134;
  pub const VT_UNK_66: flatbuffers::VOffsetT = 136;
  pub const VT_TAGS: flatbuffers::VOffsetT = 138;
  pub const VT_UNK_68: flatbuffers::VOffsetT = 140;
  pub const VT_UNK_69: flatbuffers::VOffsetT = 142;
  pub const VT_UNK_70: flatbuffers::VOffsetT = 144;
  pub const VT_WEAPON_TYPE: flatbuffers::VOffsetT = 146;
  pub const VT_ELEMENT: flatbuffers::VOffsetT = 148;
  pub const VT_HIT_TYPE: flatbuffers::VOffsetT = 150;
  pub const VT_UNK_ELEMENT_CAMP: flatbuffers::VOffsetT = 152;
  pub const VT_UNK_75: flatbuffers::VOffsetT = 154;
  pub const VT_UNK_76: flatbuffers::VOffsetT = 156;
  pub const VT_UNK_77: flatbuffers::VOffsetT = 158;
  pub const VT_UNK_78: flatbuffers::VOffsetT = 160;
  pub const VT_BASE_AVATAR_ID: flatbuffers::VOffsetT = 162;
  pub const VT_UNK_80: flatbuffers::VOffsetT = 164;
  pub const VT_RP_MAX: flatbuffers::VOffsetT = 166;
  pub const VT_RP_RECOVER: flatbuffers::VOffsetT = 168;
  pub const VT_UNK_83: flatbuffers::VOffsetT = 170;
  pub const VT_UNK_84: flatbuffers::VOffsetT = 172;
  pub const VT_AWAKE_IDS: flatbuffers::VOffsetT = 174;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AvatarBattleTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AvatarBattleTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<AvatarBattleTemplate<'bldr>> {
    let mut builder = AvatarBattleTemplateBuilder::new(_fbb);
    if let Some(x) = args.awake_ids { builder.add_awake_ids(x); }
    if let Some(x) = args.unk_84 { builder.add_unk_84(x); }
    if let Some(x) = args.unk_83 { builder.add_unk_83(x); }
    builder.add_rp_recover(args.rp_recover);
    builder.add_rp_max(args.rp_max);
    builder.add_unk_80(args.unk_80);
    builder.add_base_avatar_id(args.base_avatar_id);
    builder.add_unk_78(args.unk_78);
    builder.add_unk_77(args.unk_77);
    builder.add_unk_75(args.unk_75);
    if let Some(x) = args.unk_element_camp { builder.add_unk_element_camp(x); }
    if let Some(x) = args.hit_type { builder.add_hit_type(x); }
    if let Some(x) = args.element { builder.add_element(x); }
    builder.add_weapon_type(args.weapon_type);
    if let Some(x) = args.unk_70 { builder.add_unk_70(x); }
    if let Some(x) = args.unk_69 { builder.add_unk_69(x); }
    if let Some(x) = args.unk_68 { builder.add_unk_68(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    builder.add_unk_66(args.unk_66);
    builder.add_unk_65(args.unk_65);
    builder.add_unk_64(args.unk_64);
    builder.add_unk_63(args.unk_63);
    builder.add_unk_62(args.unk_62);
    builder.add_unk_61(args.unk_61);
    builder.add_unk_60(args.unk_60);
    builder.add_unk_59(args.unk_59);
    builder.add_unk_58(args.unk_58);
    builder.add_unk_57(args.unk_57);
    builder.add_unk_56(args.unk_56);
    builder.add_unk_55(args.unk_55);
    builder.add_unk_54(args.unk_54);
    builder.add_unk_53(args.unk_53);
    builder.add_unk_52(args.unk_52);
    builder.add_unk_51(args.unk_51);
    builder.add_unk_50(args.unk_50);
    builder.add_unk_49(args.unk_49);
    builder.add_unk_48(args.unk_48);
    builder.add_unk_47(args.unk_47);
    builder.add_unk_46(args.unk_46);
    builder.add_unk_45(args.unk_45);
    builder.add_unk_44(args.unk_44);
    builder.add_unk_43(args.unk_43);
    builder.add_unk_42(args.unk_42);
    builder.add_unk_41(args.unk_41);
    builder.add_rbl_probability(args.rbl_probability);
    builder.add_rbl_correction_factor(args.rbl_correction_factor);
    builder.add_rbl(args.rbl);
    builder.add_element_mystery(args.element_mystery);
    builder.add_sp_recover(args.sp_recover);
    builder.add_sp_bar_point(args.sp_bar_point);
    builder.add_element_abnormal_power(args.element_abnormal_power);
    builder.add_break_stun(args.break_stun);
    builder.add_stun(args.stun);
    builder.add_luck(args.luck);
    builder.add_pen_delta(args.pen_delta);
    builder.add_pen_rate(args.pen_rate);
    builder.add_crit_damage_res(args.crit_damage_res);
    builder.add_crit_res(args.crit_res);
    builder.add_crit_damage(args.crit_damage);
    builder.add_crit(args.crit);
    builder.add_defence_growth(args.defence_growth);
    builder.add_defence(args.defence);
    builder.add_attack_growth(args.attack_growth);
    builder.add_attack(args.attack);
    builder.add_unk_20(args.unk_20);
    builder.add_unk_19(args.unk_19);
    builder.add_unk_18(args.unk_18);
    builder.add_unk_17(args.unk_17);
    builder.add_unk_16(args.unk_16);
    builder.add_health_growth(args.health_growth);
    builder.add_hp_max(args.hp_max);
    builder.add_unk_13(args.unk_13);
    builder.add_unk_12(args.unk_12);
    builder.add_avatar_piece_id(args.avatar_piece_id);
    builder.add_unk_10(args.unk_10);
    builder.add_unk_9(args.unk_9);
    builder.add_unk_8(args.unk_8);
    if let Some(x) = args.unk_7 { builder.add_unk_7(x); }
    if let Some(x) = args.unk_6 { builder.add_unk_6(x); }
    if let Some(x) = args.unk_5 { builder.add_unk_5(x); }
    if let Some(x) = args.unk_4 { builder.add_unk_4(x); }
    if let Some(x) = args.unk_3 { builder.add_unk_3(x); }
    if let Some(x) = args.unk_2 { builder.add_unk_2(x); }
    if let Some(x) = args.unk_1 { builder.add_unk_1(x); }
    builder.add_id(args.id);
    builder.add_unk_76(args.unk_76);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AvatarBattleTemplate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_1(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_1, None)}
  }
  #[inline]
  pub fn unk_2(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_2, None)}
  }
  #[inline]
  pub fn unk_3(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_3, None)}
  }
  #[inline]
  pub fn unk_4(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_4, None)}
  }
  #[inline]
  pub fn unk_5(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_5, None)}
  }
  #[inline]
  pub fn unk_6(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_6, None)}
  }
  #[inline]
  pub fn unk_7(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_7, None)}
  }
  #[inline]
  pub fn unk_8(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_8, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_9(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_9, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_10(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_10, Some(0)).unwrap()}
  }
  #[inline]
  pub fn avatar_piece_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_AVATAR_PIECE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_12(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_12, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_13(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_13, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hp_max(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_HP_MAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn health_growth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_HEALTH_GROWTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_16(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_16, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_17(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_17, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_18(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_18, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_19(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_19, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_20(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_20, Some(0)).unwrap()}
  }
  #[inline]
  pub fn attack(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_ATTACK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn attack_growth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_ATTACK_GROWTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn defence(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_DEFENCE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn defence_growth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_DEFENCE_GROWTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn crit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_CRIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn crit_damage(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_CRIT_DAMAGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn crit_res(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_CRIT_RES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn crit_damage_res(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_CRIT_DAMAGE_RES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pen_rate(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_PEN_RATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pen_delta(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_PEN_DELTA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn luck(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_LUCK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn stun(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_STUN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn break_stun(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_BREAK_STUN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn element_abnormal_power(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_ELEMENT_ABNORMAL_POWER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sp_bar_point(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_SP_BAR_POINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sp_recover(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_SP_RECOVER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn element_mystery(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_ELEMENT_MYSTERY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rbl(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_RBL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rbl_correction_factor(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_RBL_CORRECTION_FACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rbl_probability(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_RBL_PROBABILITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_41(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_41, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_42(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_42, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_43(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_43, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_44(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_44, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_45(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_45, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_46(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_46, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_47(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_47, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_48(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_48, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_49(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_49, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_50(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_50, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_51(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_51, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_52(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_52, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_53(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_53, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_54(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_54, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_55(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_55, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_56(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_56, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_57(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_57, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_58(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_58, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_59(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_59, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_60(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AvatarBattleTemplate::VT_UNK_60, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_61(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AvatarBattleTemplate::VT_UNK_61, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_62(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AvatarBattleTemplate::VT_UNK_62, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_63(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_63, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_64(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_64, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_65(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_65, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_66(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_66, Some(0)).unwrap()}
  }
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AvatarBattleTemplate::VT_TAGS, None)}
  }
  #[inline]
  pub fn unk_68(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_68, None)}
  }
  #[inline]
  pub fn unk_69(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_69, None)}
  }
  #[inline]
  pub fn unk_70(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_70, None)}
  }
  #[inline]
  pub fn weapon_type(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_WEAPON_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn element(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_ELEMENT, None)}
  }
  #[inline]
  pub fn hit_type(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_HIT_TYPE, None)}
  }
  #[inline]
  pub fn unk_element_camp(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AvatarBattleTemplate::VT_UNK_ELEMENT_CAMP, None)}
  }
  #[inline]
  pub fn unk_75(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_75, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_76(&self) -> i16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i16>(AvatarBattleTemplate::VT_UNK_76, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_77(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_77, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_78(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_78, Some(0)).unwrap()}
  }
  #[inline]
  pub fn base_avatar_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_BASE_AVATAR_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_80(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_UNK_80, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rp_max(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_RP_MAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rp_recover(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AvatarBattleTemplate::VT_RP_RECOVER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_83(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(AvatarBattleTemplate::VT_UNK_83, None)}
  }
  #[inline]
  pub fn unk_84(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(AvatarBattleTemplate::VT_UNK_84, None)}
  }
  #[inline]
  pub fn awake_ids(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(AvatarBattleTemplate::VT_AWAKE_IDS, None)}
  }
}

impl flatbuffers::Verifiable for AvatarBattleTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<i32>("unk_8", Self::VT_UNK_8, false)?
     .visit_field::<i32>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<i32>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<i32>("avatar_piece_id", Self::VT_AVATAR_PIECE_ID, false)?
     .visit_field::<i32>("unk_12", Self::VT_UNK_12, false)?
     .visit_field::<i32>("unk_13", Self::VT_UNK_13, false)?
     .visit_field::<i32>("hp_max", Self::VT_HP_MAX, false)?
     .visit_field::<i32>("health_growth", Self::VT_HEALTH_GROWTH, false)?
     .visit_field::<i32>("unk_16", Self::VT_UNK_16, false)?
     .visit_field::<i32>("unk_17", Self::VT_UNK_17, false)?
     .visit_field::<i32>("unk_18", Self::VT_UNK_18, false)?
     .visit_field::<i32>("unk_19", Self::VT_UNK_19, false)?
     .visit_field::<i32>("unk_20", Self::VT_UNK_20, false)?
     .visit_field::<i32>("attack", Self::VT_ATTACK, false)?
     .visit_field::<i32>("attack_growth", Self::VT_ATTACK_GROWTH, false)?
     .visit_field::<i32>("defence", Self::VT_DEFENCE, false)?
     .visit_field::<i32>("defence_growth", Self::VT_DEFENCE_GROWTH, false)?
     .visit_field::<i32>("crit", Self::VT_CRIT, false)?
     .visit_field::<i32>("crit_damage", Self::VT_CRIT_DAMAGE, false)?
     .visit_field::<i32>("crit_res", Self::VT_CRIT_RES, false)?
     .visit_field::<i32>("crit_damage_res", Self::VT_CRIT_DAMAGE_RES, false)?
     .visit_field::<i32>("pen_rate", Self::VT_PEN_RATE, false)?
     .visit_field::<i32>("pen_delta", Self::VT_PEN_DELTA, false)?
     .visit_field::<i32>("luck", Self::VT_LUCK, false)?
     .visit_field::<i32>("stun", Self::VT_STUN, false)?
     .visit_field::<i32>("break_stun", Self::VT_BREAK_STUN, false)?
     .visit_field::<i32>("element_abnormal_power", Self::VT_ELEMENT_ABNORMAL_POWER, false)?
     .visit_field::<i32>("sp_bar_point", Self::VT_SP_BAR_POINT, false)?
     .visit_field::<i32>("sp_recover", Self::VT_SP_RECOVER, false)?
     .visit_field::<i32>("element_mystery", Self::VT_ELEMENT_MYSTERY, false)?
     .visit_field::<i32>("rbl", Self::VT_RBL, false)?
     .visit_field::<i32>("rbl_correction_factor", Self::VT_RBL_CORRECTION_FACTOR, false)?
     .visit_field::<i32>("rbl_probability", Self::VT_RBL_PROBABILITY, false)?
     .visit_field::<i32>("unk_41", Self::VT_UNK_41, false)?
     .visit_field::<i32>("unk_42", Self::VT_UNK_42, false)?
     .visit_field::<i32>("unk_43", Self::VT_UNK_43, false)?
     .visit_field::<i32>("unk_44", Self::VT_UNK_44, false)?
     .visit_field::<i32>("unk_45", Self::VT_UNK_45, false)?
     .visit_field::<i32>("unk_46", Self::VT_UNK_46, false)?
     .visit_field::<i32>("unk_47", Self::VT_UNK_47, false)?
     .visit_field::<i32>("unk_48", Self::VT_UNK_48, false)?
     .visit_field::<i32>("unk_49", Self::VT_UNK_49, false)?
     .visit_field::<i32>("unk_50", Self::VT_UNK_50, false)?
     .visit_field::<i32>("unk_51", Self::VT_UNK_51, false)?
     .visit_field::<i32>("unk_52", Self::VT_UNK_52, false)?
     .visit_field::<i32>("unk_53", Self::VT_UNK_53, false)?
     .visit_field::<i32>("unk_54", Self::VT_UNK_54, false)?
     .visit_field::<i32>("unk_55", Self::VT_UNK_55, false)?
     .visit_field::<i32>("unk_56", Self::VT_UNK_56, false)?
     .visit_field::<i32>("unk_57", Self::VT_UNK_57, false)?
     .visit_field::<i32>("unk_58", Self::VT_UNK_58, false)?
     .visit_field::<i32>("unk_59", Self::VT_UNK_59, false)?
     .visit_field::<u32>("unk_60", Self::VT_UNK_60, false)?
     .visit_field::<u32>("unk_61", Self::VT_UNK_61, false)?
     .visit_field::<u32>("unk_62", Self::VT_UNK_62, false)?
     .visit_field::<i32>("unk_63", Self::VT_UNK_63, false)?
     .visit_field::<i32>("unk_64", Self::VT_UNK_64, false)?
     .visit_field::<i32>("unk_65", Self::VT_UNK_65, false)?
     .visit_field::<i32>("unk_66", Self::VT_UNK_66, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_68", Self::VT_UNK_68, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_69", Self::VT_UNK_69, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_70", Self::VT_UNK_70, false)?
     .visit_field::<i32>("weapon_type", Self::VT_WEAPON_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("element", Self::VT_ELEMENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("hit_type", Self::VT_HIT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("unk_element_camp", Self::VT_UNK_ELEMENT_CAMP, false)?
     .visit_field::<i32>("unk_75", Self::VT_UNK_75, false)?
     .visit_field::<i16>("unk_76", Self::VT_UNK_76, false)?
     .visit_field::<i32>("unk_77", Self::VT_UNK_77, false)?
     .visit_field::<i32>("unk_78", Self::VT_UNK_78, false)?
     .visit_field::<i32>("base_avatar_id", Self::VT_BASE_AVATAR_ID, false)?
     .visit_field::<i32>("unk_80", Self::VT_UNK_80, false)?
     .visit_field::<i32>("rp_max", Self::VT_RP_MAX, false)?
     .visit_field::<i32>("rp_recover", Self::VT_RP_RECOVER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_83", Self::VT_UNK_83, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("unk_84", Self::VT_UNK_84, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("awake_ids", Self::VT_AWAKE_IDS, false)?
     .finish();
    Ok(())
  }
}
pub struct AvatarBattleTemplateArgs<'a> {
    pub id: u32,
    pub unk_1: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_2: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_3: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_4: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_5: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_6: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_7: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_8: i32,
    pub unk_9: i32,
    pub unk_10: i32,
    pub avatar_piece_id: i32,
    pub unk_12: i32,
    pub unk_13: i32,
    pub hp_max: i32,
    pub health_growth: i32,
    pub unk_16: i32,
    pub unk_17: i32,
    pub unk_18: i32,
    pub unk_19: i32,
    pub unk_20: i32,
    pub attack: i32,
    pub attack_growth: i32,
    pub defence: i32,
    pub defence_growth: i32,
    pub crit: i32,
    pub crit_damage: i32,
    pub crit_res: i32,
    pub crit_damage_res: i32,
    pub pen_rate: i32,
    pub pen_delta: i32,
    pub luck: i32,
    pub stun: i32,
    pub break_stun: i32,
    pub element_abnormal_power: i32,
    pub sp_bar_point: i32,
    pub sp_recover: i32,
    pub element_mystery: i32,
    pub rbl: i32,
    pub rbl_correction_factor: i32,
    pub rbl_probability: i32,
    pub unk_41: i32,
    pub unk_42: i32,
    pub unk_43: i32,
    pub unk_44: i32,
    pub unk_45: i32,
    pub unk_46: i32,
    pub unk_47: i32,
    pub unk_48: i32,
    pub unk_49: i32,
    pub unk_50: i32,
    pub unk_51: i32,
    pub unk_52: i32,
    pub unk_53: i32,
    pub unk_54: i32,
    pub unk_55: i32,
    pub unk_56: i32,
    pub unk_57: i32,
    pub unk_58: i32,
    pub unk_59: i32,
    pub unk_60: u32,
    pub unk_61: u32,
    pub unk_62: u32,
    pub unk_63: i32,
    pub unk_64: i32,
    pub unk_65: i32,
    pub unk_66: i32,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub unk_68: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_69: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_70: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub weapon_type: i32,
    pub element: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub hit_type: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_element_camp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub unk_75: i32,
    pub unk_76: i16,
    pub unk_77: i32,
    pub unk_78: i32,
    pub base_avatar_id: i32,
    pub unk_80: i32,
    pub rp_max: i32,
    pub rp_recover: i32,
    pub unk_83: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_84: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub awake_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for AvatarBattleTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    AvatarBattleTemplateArgs {
      id: 0,
      unk_1: None,
      unk_2: None,
      unk_3: None,
      unk_4: None,
      unk_5: None,
      unk_6: None,
      unk_7: None,
      unk_8: 0,
      unk_9: 0,
      unk_10: 0,
      avatar_piece_id: 0,
      unk_12: 0,
      unk_13: 0,
      hp_max: 0,
      health_growth: 0,
      unk_16: 0,
      unk_17: 0,
      unk_18: 0,
      unk_19: 0,
      unk_20: 0,
      attack: 0,
      attack_growth: 0,
      defence: 0,
      defence_growth: 0,
      crit: 0,
      crit_damage: 0,
      crit_res: 0,
      crit_damage_res: 0,
      pen_rate: 0,
      pen_delta: 0,
      luck: 0,
      stun: 0,
      break_stun: 0,
      element_abnormal_power: 0,
      sp_bar_point: 0,
      sp_recover: 0,
      element_mystery: 0,
      rbl: 0,
      rbl_correction_factor: 0,
      rbl_probability: 0,
      unk_41: 0,
      unk_42: 0,
      unk_43: 0,
      unk_44: 0,
      unk_45: 0,
      unk_46: 0,
      unk_47: 0,
      unk_48: 0,
      unk_49: 0,
      unk_50: 0,
      unk_51: 0,
      unk_52: 0,
      unk_53: 0,
      unk_54: 0,
      unk_55: 0,
      unk_56: 0,
      unk_57: 0,
      unk_58: 0,
      unk_59: 0,
      unk_60: 0,
      unk_61: 0,
      unk_62: 0,
      unk_63: 0,
      unk_64: 0,
      unk_65: 0,
      unk_66: 0,
      tags: None,
      unk_68: None,
      unk_69: None,
      unk_70: None,
      weapon_type: 0,
      element: None,
      hit_type: None,
      unk_element_camp: None,
      unk_75: 0,
      unk_76: 0,
      unk_77: 0,
      unk_78: 0,
      base_avatar_id: 0,
      unk_80: 0,
      rp_max: 0,
      rp_recover: 0,
      unk_83: None,
      unk_84: None,
      awake_ids: None,
    }
  }
}

pub struct AvatarBattleTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AvatarBattleTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(AvatarBattleTemplate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_1, unk_1);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_2, unk_2);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_3, unk_3);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_4, unk_4);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_5, unk_5);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_6, unk_6);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_7, unk_7);
  }
  #[inline]
  pub fn add_unk_8(&mut self, unk_8: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_8, unk_8, 0);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_9, unk_9, 0);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_10, unk_10, 0);
  }
  #[inline]
  pub fn add_avatar_piece_id(&mut self, avatar_piece_id: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_AVATAR_PIECE_ID, avatar_piece_id, 0);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_12, unk_12, 0);
  }
  #[inline]
  pub fn add_unk_13(&mut self, unk_13: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_13, unk_13, 0);
  }
  #[inline]
  pub fn add_hp_max(&mut self, hp_max: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_HP_MAX, hp_max, 0);
  }
  #[inline]
  pub fn add_health_growth(&mut self, health_growth: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_HEALTH_GROWTH, health_growth, 0);
  }
  #[inline]
  pub fn add_unk_16(&mut self, unk_16: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_16, unk_16, 0);
  }
  #[inline]
  pub fn add_unk_17(&mut self, unk_17: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_17, unk_17, 0);
  }
  #[inline]
  pub fn add_unk_18(&mut self, unk_18: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_18, unk_18, 0);
  }
  #[inline]
  pub fn add_unk_19(&mut self, unk_19: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_19, unk_19, 0);
  }
  #[inline]
  pub fn add_unk_20(&mut self, unk_20: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_20, unk_20, 0);
  }
  #[inline]
  pub fn add_attack(&mut self, attack: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_ATTACK, attack, 0);
  }
  #[inline]
  pub fn add_attack_growth(&mut self, attack_growth: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_ATTACK_GROWTH, attack_growth, 0);
  }
  #[inline]
  pub fn add_defence(&mut self, defence: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_DEFENCE, defence, 0);
  }
  #[inline]
  pub fn add_defence_growth(&mut self, defence_growth: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_DEFENCE_GROWTH, defence_growth, 0);
  }
  #[inline]
  pub fn add_crit(&mut self, crit: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_CRIT, crit, 0);
  }
  #[inline]
  pub fn add_crit_damage(&mut self, crit_damage: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_CRIT_DAMAGE, crit_damage, 0);
  }
  #[inline]
  pub fn add_crit_res(&mut self, crit_res: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_CRIT_RES, crit_res, 0);
  }
  #[inline]
  pub fn add_crit_damage_res(&mut self, crit_damage_res: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_CRIT_DAMAGE_RES, crit_damage_res, 0);
  }
  #[inline]
  pub fn add_pen_rate(&mut self, pen_rate: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_PEN_RATE, pen_rate, 0);
  }
  #[inline]
  pub fn add_pen_delta(&mut self, pen_delta: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_PEN_DELTA, pen_delta, 0);
  }
  #[inline]
  pub fn add_luck(&mut self, luck: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_LUCK, luck, 0);
  }
  #[inline]
  pub fn add_stun(&mut self, stun: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_STUN, stun, 0);
  }
  #[inline]
  pub fn add_break_stun(&mut self, break_stun: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_BREAK_STUN, break_stun, 0);
  }
  #[inline]
  pub fn add_element_abnormal_power(&mut self, element_abnormal_power: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_ELEMENT_ABNORMAL_POWER, element_abnormal_power, 0);
  }
  #[inline]
  pub fn add_sp_bar_point(&mut self, sp_bar_point: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_SP_BAR_POINT, sp_bar_point, 0);
  }
  #[inline]
  pub fn add_sp_recover(&mut self, sp_recover: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_SP_RECOVER, sp_recover, 0);
  }
  #[inline]
  pub fn add_element_mystery(&mut self, element_mystery: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_ELEMENT_MYSTERY, element_mystery, 0);
  }
  #[inline]
  pub fn add_rbl(&mut self, rbl: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_RBL, rbl, 0);
  }
  #[inline]
  pub fn add_rbl_correction_factor(&mut self, rbl_correction_factor: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_RBL_CORRECTION_FACTOR, rbl_correction_factor, 0);
  }
  #[inline]
  pub fn add_rbl_probability(&mut self, rbl_probability: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_RBL_PROBABILITY, rbl_probability, 0);
  }
  #[inline]
  pub fn add_unk_41(&mut self, unk_41: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_41, unk_41, 0);
  }
  #[inline]
  pub fn add_unk_42(&mut self, unk_42: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_42, unk_42, 0);
  }
  #[inline]
  pub fn add_unk_43(&mut self, unk_43: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_43, unk_43, 0);
  }
  #[inline]
  pub fn add_unk_44(&mut self, unk_44: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_44, unk_44, 0);
  }
  #[inline]
  pub fn add_unk_45(&mut self, unk_45: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_45, unk_45, 0);
  }
  #[inline]
  pub fn add_unk_46(&mut self, unk_46: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_46, unk_46, 0);
  }
  #[inline]
  pub fn add_unk_47(&mut self, unk_47: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_47, unk_47, 0);
  }
  #[inline]
  pub fn add_unk_48(&mut self, unk_48: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_48, unk_48, 0);
  }
  #[inline]
  pub fn add_unk_49(&mut self, unk_49: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_49, unk_49, 0);
  }
  #[inline]
  pub fn add_unk_50(&mut self, unk_50: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_50, unk_50, 0);
  }
  #[inline]
  pub fn add_unk_51(&mut self, unk_51: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_51, unk_51, 0);
  }
  #[inline]
  pub fn add_unk_52(&mut self, unk_52: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_52, unk_52, 0);
  }
  #[inline]
  pub fn add_unk_53(&mut self, unk_53: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_53, unk_53, 0);
  }
  #[inline]
  pub fn add_unk_54(&mut self, unk_54: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_54, unk_54, 0);
  }
  #[inline]
  pub fn add_unk_55(&mut self, unk_55: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_55, unk_55, 0);
  }
  #[inline]
  pub fn add_unk_56(&mut self, unk_56: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_56, unk_56, 0);
  }
  #[inline]
  pub fn add_unk_57(&mut self, unk_57: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_57, unk_57, 0);
  }
  #[inline]
  pub fn add_unk_58(&mut self, unk_58: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_58, unk_58, 0);
  }
  #[inline]
  pub fn add_unk_59(&mut self, unk_59: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_59, unk_59, 0);
  }
  #[inline]
  pub fn add_unk_60(&mut self, unk_60: u32) {
    self.fbb_.push_slot::<u32>(AvatarBattleTemplate::VT_UNK_60, unk_60, 0);
  }
  #[inline]
  pub fn add_unk_61(&mut self, unk_61: u32) {
    self.fbb_.push_slot::<u32>(AvatarBattleTemplate::VT_UNK_61, unk_61, 0);
  }
  #[inline]
  pub fn add_unk_62(&mut self, unk_62: u32) {
    self.fbb_.push_slot::<u32>(AvatarBattleTemplate::VT_UNK_62, unk_62, 0);
  }
  #[inline]
  pub fn add_unk_63(&mut self, unk_63: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_63, unk_63, 0);
  }
  #[inline]
  pub fn add_unk_64(&mut self, unk_64: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_64, unk_64, 0);
  }
  #[inline]
  pub fn add_unk_65(&mut self, unk_65: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_65, unk_65, 0);
  }
  #[inline]
  pub fn add_unk_66(&mut self, unk_66: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_66, unk_66, 0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_unk_68(&mut self, unk_68: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_68, unk_68);
  }
  #[inline]
  pub fn add_unk_69(&mut self, unk_69: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_69, unk_69);
  }
  #[inline]
  pub fn add_unk_70(&mut self, unk_70: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_70, unk_70);
  }
  #[inline]
  pub fn add_weapon_type(&mut self, weapon_type: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_WEAPON_TYPE, weapon_type, 0);
  }
  #[inline]
  pub fn add_element(&mut self, element: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_ELEMENT, element);
  }
  #[inline]
  pub fn add_hit_type(&mut self, hit_type: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_HIT_TYPE, hit_type);
  }
  #[inline]
  pub fn add_unk_element_camp(&mut self, unk_element_camp: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_ELEMENT_CAMP, unk_element_camp);
  }
  #[inline]
  pub fn add_unk_75(&mut self, unk_75: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_75, unk_75, 0);
  }
  #[inline]
  pub fn add_unk_76(&mut self, unk_76: i16) {
    self.fbb_.push_slot::<i16>(AvatarBattleTemplate::VT_UNK_76, unk_76, 0);
  }
  #[inline]
  pub fn add_unk_77(&mut self, unk_77: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_77, unk_77, 0);
  }
  #[inline]
  pub fn add_unk_78(&mut self, unk_78: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_78, unk_78, 0);
  }
  #[inline]
  pub fn add_base_avatar_id(&mut self, base_avatar_id: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_BASE_AVATAR_ID, base_avatar_id, 0);
  }
  #[inline]
  pub fn add_unk_80(&mut self, unk_80: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_UNK_80, unk_80, 0);
  }
  #[inline]
  pub fn add_rp_max(&mut self, rp_max: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_RP_MAX, rp_max, 0);
  }
  #[inline]
  pub fn add_rp_recover(&mut self, rp_recover: i32) {
    self.fbb_.push_slot::<i32>(AvatarBattleTemplate::VT_RP_RECOVER, rp_recover, 0);
  }
  #[inline]
  pub fn add_unk_83(&mut self, unk_83: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_83, unk_83);
  }
  #[inline]
  pub fn add_unk_84(&mut self, unk_84: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_UNK_84, unk_84);
  }
  #[inline]
  pub fn add_awake_ids(&mut self, awake_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplate::VT_AWAKE_IDS, awake_ids);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AvatarBattleTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AvatarBattleTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AvatarBattleTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AvatarBattleTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AvatarBattleTemplate");
      ds.field("id", &self.id());
      ds.field("unk_1", &self.unk_1());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("unk_7", &self.unk_7());
      ds.field("unk_8", &self.unk_8());
      ds.field("unk_9", &self.unk_9());
      ds.field("unk_10", &self.unk_10());
      ds.field("avatar_piece_id", &self.avatar_piece_id());
      ds.field("unk_12", &self.unk_12());
      ds.field("unk_13", &self.unk_13());
      ds.field("hp_max", &self.hp_max());
      ds.field("health_growth", &self.health_growth());
      ds.field("unk_16", &self.unk_16());
      ds.field("unk_17", &self.unk_17());
      ds.field("unk_18", &self.unk_18());
      ds.field("unk_19", &self.unk_19());
      ds.field("unk_20", &self.unk_20());
      ds.field("attack", &self.attack());
      ds.field("attack_growth", &self.attack_growth());
      ds.field("defence", &self.defence());
      ds.field("defence_growth", &self.defence_growth());
      ds.field("crit", &self.crit());
      ds.field("crit_damage", &self.crit_damage());
      ds.field("crit_res", &self.crit_res());
      ds.field("crit_damage_res", &self.crit_damage_res());
      ds.field("pen_rate", &self.pen_rate());
      ds.field("pen_delta", &self.pen_delta());
      ds.field("luck", &self.luck());
      ds.field("stun", &self.stun());
      ds.field("break_stun", &self.break_stun());
      ds.field("element_abnormal_power", &self.element_abnormal_power());
      ds.field("sp_bar_point", &self.sp_bar_point());
      ds.field("sp_recover", &self.sp_recover());
      ds.field("element_mystery", &self.element_mystery());
      ds.field("rbl", &self.rbl());
      ds.field("rbl_correction_factor", &self.rbl_correction_factor());
      ds.field("rbl_probability", &self.rbl_probability());
      ds.field("unk_41", &self.unk_41());
      ds.field("unk_42", &self.unk_42());
      ds.field("unk_43", &self.unk_43());
      ds.field("unk_44", &self.unk_44());
      ds.field("unk_45", &self.unk_45());
      ds.field("unk_46", &self.unk_46());
      ds.field("unk_47", &self.unk_47());
      ds.field("unk_48", &self.unk_48());
      ds.field("unk_49", &self.unk_49());
      ds.field("unk_50", &self.unk_50());
      ds.field("unk_51", &self.unk_51());
      ds.field("unk_52", &self.unk_52());
      ds.field("unk_53", &self.unk_53());
      ds.field("unk_54", &self.unk_54());
      ds.field("unk_55", &self.unk_55());
      ds.field("unk_56", &self.unk_56());
      ds.field("unk_57", &self.unk_57());
      ds.field("unk_58", &self.unk_58());
      ds.field("unk_59", &self.unk_59());
      ds.field("unk_60", &self.unk_60());
      ds.field("unk_61", &self.unk_61());
      ds.field("unk_62", &self.unk_62());
      ds.field("unk_63", &self.unk_63());
      ds.field("unk_64", &self.unk_64());
      ds.field("unk_65", &self.unk_65());
      ds.field("unk_66", &self.unk_66());
      ds.field("tags", &self.tags());
      ds.field("unk_68", &self.unk_68());
      ds.field("unk_69", &self.unk_69());
      ds.field("unk_70", &self.unk_70());
      ds.field("weapon_type", &self.weapon_type());
      ds.field("element", &self.element());
      ds.field("hit_type", &self.hit_type());
      ds.field("unk_element_camp", &self.unk_element_camp());
      ds.field("unk_75", &self.unk_75());
      ds.field("unk_76", &self.unk_76());
      ds.field("unk_77", &self.unk_77());
      ds.field("unk_78", &self.unk_78());
      ds.field("base_avatar_id", &self.base_avatar_id());
      ds.field("unk_80", &self.unk_80());
      ds.field("rp_max", &self.rp_max());
      ds.field("rp_recover", &self.rp_recover());
      ds.field("unk_83", &self.unk_83());
      ds.field("unk_84", &self.unk_84());
      ds.field("awake_ids", &self.awake_ids());
      ds.finish()
  }
}
pub enum AvatarBattleTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AvatarBattleTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AvatarBattleTemplateTb<'a> {
  type Inner = AvatarBattleTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AvatarBattleTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AvatarBattleTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AvatarBattleTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<AvatarBattleTemplateTb<'bldr>> {
    let mut builder = AvatarBattleTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AvatarBattleTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AvatarBattleTemplate>>>>(AvatarBattleTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for AvatarBattleTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AvatarBattleTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct AvatarBattleTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AvatarBattleTemplate<'a>>>>>,
}
impl<'a> Default for AvatarBattleTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    AvatarBattleTemplateTbArgs {
      data: None,
    }
  }
}

pub struct AvatarBattleTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AvatarBattleTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AvatarBattleTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AvatarBattleTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AvatarBattleTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AvatarBattleTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AvatarBattleTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AvatarBattleTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AvatarBattleTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}

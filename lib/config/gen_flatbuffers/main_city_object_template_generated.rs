// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MainCityObjectTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MainCityObjectTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MainCityObjectTemplate<'a> {
  type Inner = MainCityObjectTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MainCityObjectTemplate<'a> {
  pub const VT_TAG_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NPC_ID: flatbuffers::VOffsetT = 6;
  pub const VT_CREATE_POSITION: flatbuffers::VOffsetT = 8;
  pub const VT_CREATE_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_NPC_NAME: flatbuffers::VOffsetT = 12;
  pub const VT_UNK_0: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 16;
  pub const VT_DIALOGUE: flatbuffers::VOffsetT = 18;
  pub const VT_INTERACT_NAME: flatbuffers::VOffsetT = 20;
  pub const VT_INTERACT_SHAPE: flatbuffers::VOffsetT = 22;
  pub const VT_INTERACT_SCALE: flatbuffers::VOffsetT = 24;
  pub const VT_SECONDARY_INTERACT_SHAPE: flatbuffers::VOffsetT = 26;
  pub const VT_SECONDARY_INTERACT_SCALE: flatbuffers::VOffsetT = 28;
  pub const VT_FAN_INTERACT_PARAM: flatbuffers::VOffsetT = 30;
  pub const VT_FOCUS_INTERACT_SCALE: flatbuffers::VOffsetT = 32;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 36;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 38;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 40;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 42;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 44;
  pub const VT_UNK_8: flatbuffers::VOffsetT = 46;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 48;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 50;
  pub const VT_UNK_11: flatbuffers::VOffsetT = 52;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 54;
  pub const VT_UNK_13: flatbuffers::VOffsetT = 56;
  pub const VT_UNK_14: flatbuffers::VOffsetT = 58;
  pub const VT_UNK_15: flatbuffers::VOffsetT = 60;
  pub const VT_UNK_16: flatbuffers::VOffsetT = 62;
  pub const VT_UNK_17: flatbuffers::VOffsetT = 64;
  pub const VT_UNK_18: flatbuffers::VOffsetT = 66;
  pub const VT_UNK_19: flatbuffers::VOffsetT = 68;
  pub const VT_UNK_20: flatbuffers::VOffsetT = 70;
  pub const VT_UNK_21: flatbuffers::VOffsetT = 72;
  pub const VT_UNK_22: flatbuffers::VOffsetT = 74;
  pub const VT_UNK_23: flatbuffers::VOffsetT = 76;
  pub const VT_UNK_24: flatbuffers::VOffsetT = 78;
  pub const VT_UNK_25: flatbuffers::VOffsetT = 80;
  pub const VT_UNK_26: flatbuffers::VOffsetT = 82;
  pub const VT_UNK_27: flatbuffers::VOffsetT = 84;
  pub const VT_DEFAULT_INTERACT_IDS: flatbuffers::VOffsetT = 86;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MainCityObjectTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MainCityObjectTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<MainCityObjectTemplate<'bldr>> {
    let mut builder = MainCityObjectTemplateBuilder::new(_fbb);
    if let Some(x) = args.default_interact_ids { builder.add_default_interact_ids(x); }
    builder.add_unk_26(args.unk_26);
    builder.add_unk_24(args.unk_24);
    builder.add_unk_22(args.unk_22);
    builder.add_unk_21(args.unk_21);
    builder.add_unk_20(args.unk_20);
    builder.add_unk_19(args.unk_19);
    builder.add_unk_18(args.unk_18);
    builder.add_unk_16(args.unk_16);
    builder.add_unk_14(args.unk_14);
    builder.add_unk_13(args.unk_13);
    builder.add_unk_12(args.unk_12);
    builder.add_unk_11(args.unk_11);
    builder.add_unk_10(args.unk_10);
    builder.add_unk_9(args.unk_9);
    builder.add_unk_6(args.unk_6);
    builder.add_focus_interact_scale(args.focus_interact_scale);
    if let Some(x) = args.fan_interact_param { builder.add_fan_interact_param(x); }
    if let Some(x) = args.secondary_interact_scale { builder.add_secondary_interact_scale(x); }
    builder.add_secondary_interact_shape(args.secondary_interact_shape);
    if let Some(x) = args.interact_scale { builder.add_interact_scale(x); }
    builder.add_interact_shape(args.interact_shape);
    if let Some(x) = args.interact_name { builder.add_interact_name(x); }
    if let Some(x) = args.dialogue { builder.add_dialogue(x); }
    builder.add_unk_1(args.unk_1);
    builder.add_unk_0(args.unk_0);
    if let Some(x) = args.npc_name { builder.add_npc_name(x); }
    builder.add_create_type(args.create_type);
    if let Some(x) = args.create_position { builder.add_create_position(x); }
    builder.add_npc_id(args.npc_id);
    builder.add_tag_id(args.tag_id);
    builder.add_unk_27(args.unk_27);
    builder.add_unk_25(args.unk_25);
    builder.add_unk_23(args.unk_23);
    builder.add_unk_17(args.unk_17);
    builder.add_unk_15(args.unk_15);
    builder.add_unk_8(args.unk_8);
    builder.add_unk_7(args.unk_7);
    builder.add_unk_5(args.unk_5);
    builder.add_unk_4(args.unk_4);
    builder.add_unk_3(args.unk_3);
    builder.add_unk_2(args.unk_2);
    builder.finish()
  }


  #[inline]
  pub fn tag_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_TAG_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn npc_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_NPC_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn create_position(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_CREATE_POSITION, None)}
  }
  #[inline]
  pub fn create_type(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_CREATE_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn npc_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_NPC_NAME, None)}
  }
  #[inline]
  pub fn unk_0(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_UNK_0, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_UNK_1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dialogue(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_DIALOGUE, None)}
  }
  #[inline]
  pub fn interact_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_INTERACT_NAME, None)}
  }
  #[inline]
  pub fn interact_shape(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_INTERACT_SHAPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn interact_scale(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_INTERACT_SCALE, None)}
  }
  #[inline]
  pub fn secondary_interact_shape(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_SECONDARY_INTERACT_SHAPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn secondary_interact_scale(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_SECONDARY_INTERACT_SCALE, None)}
  }
  #[inline]
  pub fn fan_interact_param(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MainCityObjectTemplate::VT_FAN_INTERACT_PARAM, None)}
  }
  #[inline]
  pub fn focus_interact_scale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MainCityObjectTemplate::VT_FOCUS_INTERACT_SCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_2(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_2, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_3(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_3, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_4(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_4, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_5(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_5, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_6(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MainCityObjectTemplate::VT_UNK_6, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_7(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_7, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_8(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_8, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_9(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_9, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_10(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_10, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_11(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_11, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_12(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_12, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_13(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_13, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_14(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_14, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_15(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_15, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_16(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_16, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_17(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_17, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_18(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_18, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_19(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_19, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_20(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_20, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_21(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_21, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_22(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_22, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_23(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_23, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_24(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_24, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_25(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MainCityObjectTemplate::VT_UNK_25, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_26(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MainCityObjectTemplate::VT_UNK_26, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_27(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(MainCityObjectTemplate::VT_UNK_27, Some(0)).unwrap()}
  }
  #[inline]
  pub fn default_interact_ids(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(MainCityObjectTemplate::VT_DEFAULT_INTERACT_IDS, None)}
  }
}

impl flatbuffers::Verifiable for MainCityObjectTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("tag_id", Self::VT_TAG_ID, false)?
     .visit_field::<i32>("npc_id", Self::VT_NPC_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("create_position", Self::VT_CREATE_POSITION, false)?
     .visit_field::<i32>("create_type", Self::VT_CREATE_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("npc_name", Self::VT_NPC_NAME, false)?
     .visit_field::<i32>("unk_0", Self::VT_UNK_0, false)?
     .visit_field::<i32>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dialogue", Self::VT_DIALOGUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("interact_name", Self::VT_INTERACT_NAME, false)?
     .visit_field::<i32>("interact_shape", Self::VT_INTERACT_SHAPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("interact_scale", Self::VT_INTERACT_SCALE, false)?
     .visit_field::<i32>("secondary_interact_shape", Self::VT_SECONDARY_INTERACT_SHAPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("secondary_interact_scale", Self::VT_SECONDARY_INTERACT_SCALE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fan_interact_param", Self::VT_FAN_INTERACT_PARAM, false)?
     .visit_field::<f32>("focus_interact_scale", Self::VT_FOCUS_INTERACT_SCALE, false)?
     .visit_field::<bool>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<bool>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<bool>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<bool>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<i32>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<bool>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<bool>("unk_8", Self::VT_UNK_8, false)?
     .visit_field::<u32>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<u32>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<u32>("unk_11", Self::VT_UNK_11, false)?
     .visit_field::<u32>("unk_12", Self::VT_UNK_12, false)?
     .visit_field::<u32>("unk_13", Self::VT_UNK_13, false)?
     .visit_field::<u32>("unk_14", Self::VT_UNK_14, false)?
     .visit_field::<bool>("unk_15", Self::VT_UNK_15, false)?
     .visit_field::<u32>("unk_16", Self::VT_UNK_16, false)?
     .visit_field::<bool>("unk_17", Self::VT_UNK_17, false)?
     .visit_field::<u32>("unk_18", Self::VT_UNK_18, false)?
     .visit_field::<u32>("unk_19", Self::VT_UNK_19, false)?
     .visit_field::<u32>("unk_20", Self::VT_UNK_20, false)?
     .visit_field::<u32>("unk_21", Self::VT_UNK_21, false)?
     .visit_field::<u32>("unk_22", Self::VT_UNK_22, false)?
     .visit_field::<bool>("unk_23", Self::VT_UNK_23, false)?
     .visit_field::<u32>("unk_24", Self::VT_UNK_24, false)?
     .visit_field::<bool>("unk_25", Self::VT_UNK_25, false)?
     .visit_field::<u32>("unk_26", Self::VT_UNK_26, false)?
     .visit_field::<u8>("unk_27", Self::VT_UNK_27, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("default_interact_ids", Self::VT_DEFAULT_INTERACT_IDS, false)?
     .finish();
    Ok(())
  }
}
pub struct MainCityObjectTemplateArgs<'a> {
    pub tag_id: i32,
    pub npc_id: i32,
    pub create_position: Option<flatbuffers::WIPOffset<&'a str>>,
    pub create_type: i32,
    pub npc_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_0: i32,
    pub unk_1: i32,
    pub dialogue: Option<flatbuffers::WIPOffset<&'a str>>,
    pub interact_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub interact_shape: i32,
    pub interact_scale: Option<flatbuffers::WIPOffset<&'a str>>,
    pub secondary_interact_shape: i32,
    pub secondary_interact_scale: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fan_interact_param: Option<flatbuffers::WIPOffset<&'a str>>,
    pub focus_interact_scale: f32,
    pub unk_2: bool,
    pub unk_3: bool,
    pub unk_4: bool,
    pub unk_5: bool,
    pub unk_6: i32,
    pub unk_7: bool,
    pub unk_8: bool,
    pub unk_9: u32,
    pub unk_10: u32,
    pub unk_11: u32,
    pub unk_12: u32,
    pub unk_13: u32,
    pub unk_14: u32,
    pub unk_15: bool,
    pub unk_16: u32,
    pub unk_17: bool,
    pub unk_18: u32,
    pub unk_19: u32,
    pub unk_20: u32,
    pub unk_21: u32,
    pub unk_22: u32,
    pub unk_23: bool,
    pub unk_24: u32,
    pub unk_25: bool,
    pub unk_26: u32,
    pub unk_27: u8,
    pub default_interact_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for MainCityObjectTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    MainCityObjectTemplateArgs {
      tag_id: 0,
      npc_id: 0,
      create_position: None,
      create_type: 0,
      npc_name: None,
      unk_0: 0,
      unk_1: 0,
      dialogue: None,
      interact_name: None,
      interact_shape: 0,
      interact_scale: None,
      secondary_interact_shape: 0,
      secondary_interact_scale: None,
      fan_interact_param: None,
      focus_interact_scale: 0.0,
      unk_2: false,
      unk_3: false,
      unk_4: false,
      unk_5: false,
      unk_6: 0,
      unk_7: false,
      unk_8: false,
      unk_9: 0,
      unk_10: 0,
      unk_11: 0,
      unk_12: 0,
      unk_13: 0,
      unk_14: 0,
      unk_15: false,
      unk_16: 0,
      unk_17: false,
      unk_18: 0,
      unk_19: 0,
      unk_20: 0,
      unk_21: 0,
      unk_22: 0,
      unk_23: false,
      unk_24: 0,
      unk_25: false,
      unk_26: 0,
      unk_27: 0,
      default_interact_ids: None,
    }
  }
}

pub struct MainCityObjectTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MainCityObjectTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_tag_id(&mut self, tag_id: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_TAG_ID, tag_id, 0);
  }
  #[inline]
  pub fn add_npc_id(&mut self, npc_id: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_NPC_ID, npc_id, 0);
  }
  #[inline]
  pub fn add_create_position(&mut self, create_position: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_CREATE_POSITION, create_position);
  }
  #[inline]
  pub fn add_create_type(&mut self, create_type: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_CREATE_TYPE, create_type, 0);
  }
  #[inline]
  pub fn add_npc_name(&mut self, npc_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_NPC_NAME, npc_name);
  }
  #[inline]
  pub fn add_unk_0(&mut self, unk_0: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_UNK_0, unk_0, 0);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_UNK_1, unk_1, 0);
  }
  #[inline]
  pub fn add_dialogue(&mut self, dialogue: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_DIALOGUE, dialogue);
  }
  #[inline]
  pub fn add_interact_name(&mut self, interact_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_INTERACT_NAME, interact_name);
  }
  #[inline]
  pub fn add_interact_shape(&mut self, interact_shape: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_INTERACT_SHAPE, interact_shape, 0);
  }
  #[inline]
  pub fn add_interact_scale(&mut self, interact_scale: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_INTERACT_SCALE, interact_scale);
  }
  #[inline]
  pub fn add_secondary_interact_shape(&mut self, secondary_interact_shape: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_SECONDARY_INTERACT_SHAPE, secondary_interact_shape, 0);
  }
  #[inline]
  pub fn add_secondary_interact_scale(&mut self, secondary_interact_scale: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_SECONDARY_INTERACT_SCALE, secondary_interact_scale);
  }
  #[inline]
  pub fn add_fan_interact_param(&mut self, fan_interact_param: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_FAN_INTERACT_PARAM, fan_interact_param);
  }
  #[inline]
  pub fn add_focus_interact_scale(&mut self, focus_interact_scale: f32) {
    self.fbb_.push_slot::<f32>(MainCityObjectTemplate::VT_FOCUS_INTERACT_SCALE, focus_interact_scale, 0.0);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_2, unk_2, false);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_3, unk_3, false);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_4, unk_4, false);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_5, unk_5, false);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: i32) {
    self.fbb_.push_slot::<i32>(MainCityObjectTemplate::VT_UNK_6, unk_6, 0);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_7, unk_7, false);
  }
  #[inline]
  pub fn add_unk_8(&mut self, unk_8: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_8, unk_8, false);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_9, unk_9, 0);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_10, unk_10, 0);
  }
  #[inline]
  pub fn add_unk_11(&mut self, unk_11: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_11, unk_11, 0);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_12, unk_12, 0);
  }
  #[inline]
  pub fn add_unk_13(&mut self, unk_13: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_13, unk_13, 0);
  }
  #[inline]
  pub fn add_unk_14(&mut self, unk_14: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_14, unk_14, 0);
  }
  #[inline]
  pub fn add_unk_15(&mut self, unk_15: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_15, unk_15, false);
  }
  #[inline]
  pub fn add_unk_16(&mut self, unk_16: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_16, unk_16, 0);
  }
  #[inline]
  pub fn add_unk_17(&mut self, unk_17: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_17, unk_17, false);
  }
  #[inline]
  pub fn add_unk_18(&mut self, unk_18: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_18, unk_18, 0);
  }
  #[inline]
  pub fn add_unk_19(&mut self, unk_19: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_19, unk_19, 0);
  }
  #[inline]
  pub fn add_unk_20(&mut self, unk_20: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_20, unk_20, 0);
  }
  #[inline]
  pub fn add_unk_21(&mut self, unk_21: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_21, unk_21, 0);
  }
  #[inline]
  pub fn add_unk_22(&mut self, unk_22: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_22, unk_22, 0);
  }
  #[inline]
  pub fn add_unk_23(&mut self, unk_23: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_23, unk_23, false);
  }
  #[inline]
  pub fn add_unk_24(&mut self, unk_24: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_24, unk_24, 0);
  }
  #[inline]
  pub fn add_unk_25(&mut self, unk_25: bool) {
    self.fbb_.push_slot::<bool>(MainCityObjectTemplate::VT_UNK_25, unk_25, false);
  }
  #[inline]
  pub fn add_unk_26(&mut self, unk_26: u32) {
    self.fbb_.push_slot::<u32>(MainCityObjectTemplate::VT_UNK_26, unk_26, 0);
  }
  #[inline]
  pub fn add_unk_27(&mut self, unk_27: u8) {
    self.fbb_.push_slot::<u8>(MainCityObjectTemplate::VT_UNK_27, unk_27, 0);
  }
  #[inline]
  pub fn add_default_interact_ids(&mut self, default_interact_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplate::VT_DEFAULT_INTERACT_IDS, default_interact_ids);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MainCityObjectTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MainCityObjectTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MainCityObjectTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MainCityObjectTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MainCityObjectTemplate");
      ds.field("tag_id", &self.tag_id());
      ds.field("npc_id", &self.npc_id());
      ds.field("create_position", &self.create_position());
      ds.field("create_type", &self.create_type());
      ds.field("npc_name", &self.npc_name());
      ds.field("unk_0", &self.unk_0());
      ds.field("unk_1", &self.unk_1());
      ds.field("dialogue", &self.dialogue());
      ds.field("interact_name", &self.interact_name());
      ds.field("interact_shape", &self.interact_shape());
      ds.field("interact_scale", &self.interact_scale());
      ds.field("secondary_interact_shape", &self.secondary_interact_shape());
      ds.field("secondary_interact_scale", &self.secondary_interact_scale());
      ds.field("fan_interact_param", &self.fan_interact_param());
      ds.field("focus_interact_scale", &self.focus_interact_scale());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("unk_7", &self.unk_7());
      ds.field("unk_8", &self.unk_8());
      ds.field("unk_9", &self.unk_9());
      ds.field("unk_10", &self.unk_10());
      ds.field("unk_11", &self.unk_11());
      ds.field("unk_12", &self.unk_12());
      ds.field("unk_13", &self.unk_13());
      ds.field("unk_14", &self.unk_14());
      ds.field("unk_15", &self.unk_15());
      ds.field("unk_16", &self.unk_16());
      ds.field("unk_17", &self.unk_17());
      ds.field("unk_18", &self.unk_18());
      ds.field("unk_19", &self.unk_19());
      ds.field("unk_20", &self.unk_20());
      ds.field("unk_21", &self.unk_21());
      ds.field("unk_22", &self.unk_22());
      ds.field("unk_23", &self.unk_23());
      ds.field("unk_24", &self.unk_24());
      ds.field("unk_25", &self.unk_25());
      ds.field("unk_26", &self.unk_26());
      ds.field("unk_27", &self.unk_27());
      ds.field("default_interact_ids", &self.default_interact_ids());
      ds.finish()
  }
}
pub enum MainCityObjectTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MainCityObjectTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MainCityObjectTemplateTb<'a> {
  type Inner = MainCityObjectTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MainCityObjectTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MainCityObjectTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MainCityObjectTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<MainCityObjectTemplateTb<'bldr>> {
    let mut builder = MainCityObjectTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MainCityObjectTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MainCityObjectTemplate>>>>(MainCityObjectTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for MainCityObjectTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MainCityObjectTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct MainCityObjectTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MainCityObjectTemplate<'a>>>>>,
}
impl<'a> Default for MainCityObjectTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    MainCityObjectTemplateTbArgs {
      data: None,
    }
  }
}

pub struct MainCityObjectTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MainCityObjectTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MainCityObjectTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MainCityObjectTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MainCityObjectTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MainCityObjectTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MainCityObjectTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MainCityObjectTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MainCityObjectTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}

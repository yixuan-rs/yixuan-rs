// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MonsterCardDifficultyTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MonsterCardDifficultyTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MonsterCardDifficultyTemplate<'a> {
  type Inner = MonsterCardDifficultyTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MonsterCardDifficultyTemplate<'a> {
  pub const VT_DIFFICULTY: flatbuffers::VOffsetT = 4;
  pub const VT_CARD_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 8;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 10;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MonsterCardDifficultyTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MonsterCardDifficultyTemplateArgs
  ) -> flatbuffers::WIPOffset<MonsterCardDifficultyTemplate<'bldr>> {
    let mut builder = MonsterCardDifficultyTemplateBuilder::new(_fbb);
    builder.add_unk_4(args.unk_4);
    builder.add_unk_3(args.unk_3);
    builder.add_unk_2(args.unk_2);
    builder.add_card_type(args.card_type);
    builder.add_difficulty(args.difficulty);
    builder.finish()
  }


  #[inline]
  pub fn difficulty(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MonsterCardDifficultyTemplate::VT_DIFFICULTY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn card_type(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MonsterCardDifficultyTemplate::VT_CARD_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_2(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MonsterCardDifficultyTemplate::VT_UNK_2, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_3(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MonsterCardDifficultyTemplate::VT_UNK_3, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_4(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MonsterCardDifficultyTemplate::VT_UNK_4, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MonsterCardDifficultyTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("difficulty", Self::VT_DIFFICULTY, false)?
     .visit_field::<u32>("card_type", Self::VT_CARD_TYPE, false)?
     .visit_field::<u32>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<u32>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<u32>("unk_4", Self::VT_UNK_4, false)?
     .finish();
    Ok(())
  }
}
pub struct MonsterCardDifficultyTemplateArgs {
    pub difficulty: u32,
    pub card_type: u32,
    pub unk_2: u32,
    pub unk_3: u32,
    pub unk_4: u32,
}
impl<'a> Default for MonsterCardDifficultyTemplateArgs {
  #[inline]
  fn default() -> Self {
    MonsterCardDifficultyTemplateArgs {
      difficulty: 0,
      card_type: 0,
      unk_2: 0,
      unk_3: 0,
      unk_4: 0,
    }
  }
}

pub struct MonsterCardDifficultyTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MonsterCardDifficultyTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_difficulty(&mut self, difficulty: u32) {
    self.fbb_.push_slot::<u32>(MonsterCardDifficultyTemplate::VT_DIFFICULTY, difficulty, 0);
  }
  #[inline]
  pub fn add_card_type(&mut self, card_type: u32) {
    self.fbb_.push_slot::<u32>(MonsterCardDifficultyTemplate::VT_CARD_TYPE, card_type, 0);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: u32) {
    self.fbb_.push_slot::<u32>(MonsterCardDifficultyTemplate::VT_UNK_2, unk_2, 0);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: u32) {
    self.fbb_.push_slot::<u32>(MonsterCardDifficultyTemplate::VT_UNK_3, unk_3, 0);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: u32) {
    self.fbb_.push_slot::<u32>(MonsterCardDifficultyTemplate::VT_UNK_4, unk_4, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MonsterCardDifficultyTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MonsterCardDifficultyTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MonsterCardDifficultyTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MonsterCardDifficultyTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MonsterCardDifficultyTemplate");
      ds.field("difficulty", &self.difficulty());
      ds.field("card_type", &self.card_type());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.finish()
  }
}
pub enum MonsterCardDifficultyTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MonsterCardDifficultyTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MonsterCardDifficultyTemplateTb<'a> {
  type Inner = MonsterCardDifficultyTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MonsterCardDifficultyTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MonsterCardDifficultyTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MonsterCardDifficultyTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<MonsterCardDifficultyTemplateTb<'bldr>> {
    let mut builder = MonsterCardDifficultyTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MonsterCardDifficultyTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MonsterCardDifficultyTemplate>>>>(MonsterCardDifficultyTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for MonsterCardDifficultyTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MonsterCardDifficultyTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct MonsterCardDifficultyTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MonsterCardDifficultyTemplate<'a>>>>>,
}
impl<'a> Default for MonsterCardDifficultyTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    MonsterCardDifficultyTemplateTbArgs {
      data: None,
    }
  }
}

pub struct MonsterCardDifficultyTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MonsterCardDifficultyTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MonsterCardDifficultyTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonsterCardDifficultyTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MonsterCardDifficultyTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MonsterCardDifficultyTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MonsterCardDifficultyTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MonsterCardDifficultyTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MonsterCardDifficultyTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}
